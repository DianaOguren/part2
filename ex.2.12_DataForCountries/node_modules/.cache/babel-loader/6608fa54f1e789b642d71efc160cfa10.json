{"ast":null,"code":"var _jsxFileName = \"/Users/dianaoguren/Documents/part2_React/ex.2.12-2.14/src/components/Persons.js\";\nimport React from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Persons = props => {\n  let personsFilter = props.countries.filter(person => person.name.common.toLowerCase().includes(props.filterValue.toLowerCase()));\n\n  if (personsFilter.length > 10) {\n    return /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Too many matches, specify another filter\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 7,\n      columnNumber: 5\n    }, this);\n  }\n  /* if (personsFilter.length > 10){\n    return (\n    <p>Too many matches, specify another filter</p>\n  )} else if (((personsFilter.length < 10) || (personsFilter.length = 10)) && (personsFilter.length > 1)){\n      return (\n      <ul>\n          {personsFilter.map(person => \n              <li key = {person.name.common}>{person.name.common}</li>\n          )}\n        </ul>\n    )\n  } else if (personsFilter.length === 1) {\n    return (\n    <h1>{personsFilter[0].name.common}</h1>\n     )} */\n\n};\n\n_c = Persons;\nexport default Persons;\n\nvar _c;\n\n$RefreshReg$(_c, \"Persons\");","map":{"version":3,"sources":["/Users/dianaoguren/Documents/part2_React/ex.2.12-2.14/src/components/Persons.js"],"names":["React","Persons","props","personsFilter","countries","filter","person","name","common","toLowerCase","includes","filterValue","length"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;;;AAEA,MAAMC,OAAO,GAAIC,KAAD,IAAW;AACzB,MAAIC,aAAa,GAAGD,KAAK,CAACE,SAAN,CAAgBC,MAAhB,CAAuBC,MAAM,IAAKA,MAAM,CAACC,IAAP,CAAYC,MAAZ,CAAmBC,WAAnB,GAAiCC,QAAjC,CAA0CR,KAAK,CAACS,WAAN,CAAkBF,WAAlB,EAA1C,CAAlC,CAApB;;AACA,MAAIN,aAAa,CAACS,MAAd,GAAuB,EAA3B,EAA8B;AAC5B,wBACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADA;AAEA;AAEF;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGC,CAxBD;;KAAMX,O;AA0BN,eAAeA,OAAf","sourcesContent":["import React from 'react'\n\nconst Persons = (props) => {\n  let personsFilter = props.countries.filter(person => (person.name.common.toLowerCase().includes(props.filterValue.toLowerCase())));\n  if (personsFilter.length > 10){\n    return (\n    <p>Too many matches, specify another filter</p>\n  )}\n\n  /* if (personsFilter.length > 10){\n    return (\n    <p>Too many matches, specify another filter</p>\n  )} else if (((personsFilter.length < 10) || (personsFilter.length = 10)) && (personsFilter.length > 1)){\n      return (\n      <ul>\n          {personsFilter.map(person => \n              <li key = {person.name.common}>{person.name.common}</li>\n          )}\n        </ul>\n    )\n  } else if (personsFilter.length === 1) {\n    return (\n    <h1>{personsFilter[0].name.common}</h1>\n\n    )} */\n  \n};\n\nexport default Persons;"]},"metadata":{},"sourceType":"module"}